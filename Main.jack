class Main{
    function void main(){
        /* ALGORITHM
        * 1. Create a grid of cells (2D array of Cell objects)
        * 2. Choose a starting cell and make it the current cell
        * 3. While there are unvisited cells
        *       1. If the current cell has any neighbors which have not been visited
        *           1. Choose randomly one of the unvisited neighbors
        *           2. Push the current cell to the stack
        *           3. Remove the wall between the current cell and the chosen cell
        *           4. Make the chosen cell the current cell and mark it as visited
        *       2. Else if stack is not empty
        *           1. Pop a cell from the stack
        *           2. Make it the current cell
        * 4. Choose a random cell as the finish cell
        * 5. Draw the grid
        * 6. Draw the player
        * 7. Draw the finish cell
        * 8. While game is not over
        *       1. Get the key pressed
        *       2. Move the player
        *       3. Draw the player
        *       4. If player is at finish cell
        *           1. Game over
        * 9. Print "You Win!"
        *
        * Drawbacks:
        * 1. This algorithm will not create dead ends in the maze
        * 2. The maze will repeat at some places due to the PseudoRandom number generator 
        */

        var Cell next,finishCell;
        var int i,j,w;
        var int rows,cols;
        var int startRow,startCol;
        var Array Cells;
        var Array tempArr;
        var PseudoRand rng;
        var Stack stack;
        var Player player;
        var int dir;
        var boolean gameover,difficultySelected;
        var int key,seed;
        
        // Display Splash Screen
        do splashScreen.draw();     

        // Difficulty changes the width of each cell
        // Wait for Player to select difficulty level
        while (~difficultySelected){
            let seed = seed + 1;    // Increment the seed (Determines the maze layout)
            let key = Keyboard.keyPressed();
            if (key = 49){          // 1
                let w = 32;
                let difficultySelected = true;
            }
            if (key = 50){          // 2
                let w = 24;
                let difficultySelected = true;
            }
            if (key = 51){          // 3
                let w = 16;
                let difficultySelected = true;
            }
        }
        do Screen.clearScreen(); // Clear the screen
        
        // Dimensions of the grid
        let rows = ((256/w) - 2);
        let cols = ((512/w) - 2);
        
        let startRow = 1;   // Starting row of the grid
        let startCol = 2;   // Starting column of the grid

        // Define the dimensions of the grid based on the difficulty level
        let Cells = Array.new(rows);    // Cells = new Cell[rows][cols]
        let i = startRow;
        while(i < rows){
            let Cells[i] = Array.new(cols);
            let tempArr = Cells[i];
            let j = startCol;
            while(j < cols){
                let tempArr[j] = Cell.new(i,j,w);
                let j = j + 1;
            }
            let i = i + 1;
        }

        let rng = PseudoRand.def(seed);     // Create a PseudoRand object with the seed
        let stack = Stack.new(rows*cols);   // Create a stack with the maximum possible sizes

        // Start Generating the Maze
        do Output.moveCursor(10,27);
        do Output.printString("Loading...");

        let next = Main.createPassage(startRow,startCol,Cells,rows,cols,startRow,startCol,rng,stack);
        while (~(next=null)){
            let next = Main.createPassage((next.geti()),(next.getj()),Cells,rows,cols,startRow,startCol,rng,stack);
        }
        do Main.showGrid(startRow,startCol,Cells,rows,cols);

        // Define the player object
        let player = Player.new(startRow,startCol,w);

        // Choose a random cell as the finish cell
        let tempArr = Cells[startRow + rng.next(rows-startRow-1)];
        let finishCell = tempArr[startCol + rng.next(cols-startCol-1)];

        // Draw everything on the screen
        do Main.showGrid(startRow,startCol,Cells,rows,cols); // Draw Grid
        do player.draw(); // Draw Player (Circle)
        do finishCell.highlight(); // Show Finish Cell
        
        // Game Loop
        let gameover = false;
        while (~(gameover)){
            let key = Keyboard.keyPressed();
            while(key = 0 | (key < 130) | (key > 133) ){let key = Keyboard.keyPressed();}   // Wait for arrow key press
            do player.move(key-130,Cells,startRow,startCol,rows,cols);  // Move the player
            do player.draw();
            if ((player.geti() = finishCell.geti()) & (player.getj() = finishCell.getj())){ // If player reaches the finish cell
                let gameover = true;
            }
            do Sys.wait(150);   // Wait for 150ms
        }

        // Display "You Win!" message
        do Screen.clearScreen();
        do Output.moveCursor(10,27);
        do Output.printString("You Win!");
        
        // Wait for 2 seconds and restart the game
        do Cells.dispose();
        do Sys.wait(2000);
        do Main.main();     // Note: May cause overflow after 5~6 runs, suggest rerunning the program

        return;
    }


    function Cell createPassage(int x,int y,Array grid,int rows,int cols,int startRow,int startCol,PseudoRand rng,Stack stack){
        /*
        * Generate a passage in the maze starting from the current cell and return the next cell
        * Returns null if there are no unvisited neighbors (End of Generation)
        *
        * Parameters:
        * x,y: Coordinates of the current cell
        * grid: 2D array of Cell objects
        * rows,cols: Number of rows and columns in the grid
        * startRow,startCol: Starting row and column of the grid
        * rng: PseudoRand object for generating random numbers
        * stack: Stack object for backtracking
        */
        var Cell curr,next;
        var Cell left,right,top,bottom;
        var Array neighbors;
        var Cell temp;
        var Array tempArr;
        var int neighborcount;
        var int nextRand;
        var boolean flag;
        

        let tempArr = grid[x];
        let curr = tempArr[y];

        do curr.setVisited();
        
        let neighbors = Array.new(4);
        let neighbors[0] = null;
        let neighbors[1] = null;
        let neighbors[2] = null;
        let neighbors[3] = null;
        
        if (~(y-1 < startCol)){          // Check if left cell is within bounds
            let tempArr = grid[x];
            let left = tempArr[y-1];     // left = grid[x][y-1]
            if (~(left.getVisited())){   // Check if left cell is unvisited
                let neighbors[0] = left; // Add left cell to neighbors
                let neighborcount = neighborcount + 1;
            }
        }

        if (~(x-1 < startRow)){         // Check if top cell is within bounds
            let tempArr = grid[x-1];
            let top = tempArr[y];       // top = grid[x-1][y]
            if (~(top.getVisited())){   // Check if top cell is unvisited
                let neighbors[1] = top; // Add top cell to neighbors
                let neighborcount = neighborcount + 1;

            }
        }

        if (y+1 < cols){                // Check if right cell is within bounds
            let tempArr = grid[x];      
            let right = tempArr[y+1];     // right = grid[x][y+1]
            if (~(right.getVisited())){   // Check if right cell is unvisited
                let neighbors[2] = right; // Add right cell to neighbors
                let neighborcount = neighborcount + 1;
            }
        }

        if (x+1 < rows){                // Check if bottom cell is within bounds
            let tempArr = grid[x+1];    
            let bottom = tempArr[y];        // bottom = grid[x+1][y]
            if (~(bottom.getVisited())){    // Check if bottom cell is unvisited
                let neighbors[3] = bottom;  // Add bottom cell to neighbors
                let neighborcount = neighborcount + 1;
            }
        }

        // neightbours = [null,null,null,null]
        // --> [null,right,null,bottom]
        if (neighborcount > 0){
            do stack.push(curr);    // Push the current cell to the stack

            // Pick a random unvisited neighbor
            let flag = true;
            while (flag){
                let nextRand = rng.next(3);
                let next = neighbors[nextRand];
                if (next){
                    let flag = false;
                }
            }
        }
        else{
            // If there are no unvisited neighbors,
            if (stack.getSize() = 0){
                return null;    // Exit,if stack is empty
            }
            // Else, pop a cell from the stack
            let next = stack.pop();
        }
        do Main.removeWall(curr,next);
        return next;
    }

    function void removeWall(Cell curr,Cell next){
        // Remove the wall between the current cell and the next cell
        // Based on the relative position of the two cells
        var int x,y;
        let x = (curr.geti() - next.geti());
        let y = (curr.getj() - next.getj());
        if (x = 1){
            do curr.removeTopWall();
            do next.removeBottomWall();
        }
        if (x = -1){
            do curr.removeBottomWall();
            do next.removeTopWall();
        }
        if (y = 1){
            do curr.removeLeftWall();
            do next.removeRightWall();
        }
        if (y = -1){
            do curr.removeRightWall();
            do next.removeLeftWall();
        }

        return;
    }

    function void showGrid(int startRow,int startCol,Array Cells,int rows,int cols){
        /* 
        Display the grid.
        */
        var int i,j;
        var Array tempArr;
        var Cell c;
        do Screen.clearScreen();

        // Iterate through the grid and call the show() method of each cell
        let i = startRow;
        while(i<rows){
            let tempArr = Cells[i];
            let j = startCol;
            while(j<cols){
                let c = tempArr[j];
                do c.show();
                let j = j+1;
            }
            let i = i+1;
        }
        return;
    }
}